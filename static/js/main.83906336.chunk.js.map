{"version":3,"sources":["components/Table1.jsx","components/Table2.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Table1","heading","selectedItems","setSelectedItems","handleShift","componentToPrintRef","useRef","handleExport","useReactToPrint","content","current","className","style","textAlign","map","h","scope","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","ob","draggableId","draggableProps","dragHandleProps","align","cursor","onClick","placeholder","length","height","width","overflow","Table2","d","idx","App","fileUploadRef","useState","setHeading","setItems","setData","useEffect","Object","keys","table","data","type","onChange","e","file","target","files","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_json","onerror","error","then","accept","visibility","click","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.83906336.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useReactToPrint } from \"react-to-print\";\n\nconst Table1 = ({ heading, selectedItems, setSelectedItems, handleShift }) => {\n  const componentToPrintRef = useRef();\n  const handleOnDragEnd = (result) => {\n    if (!result.destination) return;\n    const items = Array.from(selectedItems);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setSelectedItems(items);\n  };\n  const handleExport = useReactToPrint({\n    content: () => componentToPrintRef.current,\n  });\n  return (\n    <div className=\"table_box\">\n      <h2\n        style={{\n          textAlign: \"center\",\n        }}\n      >\n        Table - I\n      </h2>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {heading.map((h) => (\n              <th scope=\"col\" className=\"table_heading\">\n                {h}\n              </th>\n            ))}\n            <th className=\"table_heading\">&nbsp;</th>\n          </tr>\n        </thead>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          <Droppable droppableId=\"characters\">\n            {(provided) => (\n              <tbody\n                className=\"characters\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {selectedItems.map((ob, index) => {\n                  return (\n                    <Draggable\n                      key={ob[\"Name\"]}\n                      draggableId={ob[\"Name\"]}\n                      index={index}\n                    >\n                      {(provided) => (\n                        <tr\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          {heading.map((h) => {\n                            return (\n                              <td align=\"center\" className=\"table_data\">\n                                {ob[h]}\n                              </td>\n                            );\n                          })}\n                          <td\n                            style={{\n                              cursor: \"pointer\",\n                            }}\n                            className=\"table_data\"\n                            align=\"center\"\n                            onClick={() => handleShift(0, index)}\n                          >\n                            ðŸ”»\n                          </td>\n                        </tr>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </tbody>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </table>\n      {selectedItems.length > 0 ? (\n        <button className=\"export_button\" onClick={handleExport}>\n          Print PDF\n        </button>\n      ) : null}\n      {/* NOTE: Hidden component to print */}\n      <section\n        style={{\n          height: \"0px\",\n          width: \"0px\",\n          overflow: \"hidden\",\n        }}\n      >\n        <table className=\"table\" ref={componentToPrintRef}>\n          <thead>\n            <tr>\n              {heading.map((h) => (\n                <th scope=\"col\" className=\"table_heading\">\n                  {h}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {selectedItems.map((ob, index) => {\n              return (\n                <tr  >\n                  {heading.map((h) => {\n                    return (\n                      <td align=\"center\" className=\"table_data\">\n                        {ob[h]}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </section>\n    </div>\n  );\n};\n\nexport default Table1;\n","import React from \"react\";\n\nconst Table2 = ({ heading, items, handleShift }) => {\n  return (\n    <div className=\"table_box\">\n      <h2\n        style={{\n          textAlign: \"center\",\n        }}\n      >\n        Table - II\n      </h2>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {heading.map((h) => (\n              <th scope=\"col\" className=\"table_heading\">\n                {h}\n              </th>\n            ))}\n            <th className=\"table_heading\">&nbsp;</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((d, idx) => (\n            <tr key={idx}>\n              {heading.map((h) => {\n                return <td align=\"center\" className=\"table_data\">{d[h]}</td>;\n              })}\n              <td\n                style={{\n                  cursor: \"pointer\",\n                }}\n                align=\"center\"\n                className=\"table_data\"\n                onClick={() => handleShift(1, idx)}\n              >\n                ðŸ”¼\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table2;\n","import React, { useState, useEffect , useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport \"./App.css\";\nimport Table1 from \"./components/Table1\";\nimport Table2 from \"./components/Table2\";\n\nconst App = () => {\n  const fileUploadRef = useRef(null);\n  const [heading, setHeading] = useState([]);\n  const [items, setItems] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [data, setData] = useState(null)\n  useEffect(() => {\n    if (items.length !== 0) {\n      setHeading(Object.keys(items[0]));\n    }\n  }, [items]);\n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n\n        const wsname = wb.SheetNames[0];\n\n        const ws = wb.Sheets[wsname];\n\n        const data = XLSX.utils.sheet_to_json(ws);\n\n        resolve(data);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n\n    promise.then((d) => {\n      setItems(d);\n    });\n  };\n  const handleShift = (table, index) => {\n    if (table) {\n      let data = items[index];\n      if (data) {\n        items.splice(index, 1);\n        setSelectedItems([...selectedItems, data]);\n      }\n    } else {\n      let data = selectedItems[index];\n      if (data) {\n        selectedItems.splice(index, 1);\n        setItems([...items, data]);\n      }\n    }\n  };\n  return (\n    <div className=\"main\"  >\n      {items.length === 0 && selectedItems.length === 0 ? (\n        <div className=\"input_container\">\n          <div className=\"input_box\">\n              <h2>UPLOAD FILE</h2>\n              <h3 className=\"text-center\">\n                Upload a .xlsx file that you want to add student from\n              </h3>\n              <div>\n                <input\n                  type=\"file\"\n                  ref={fileUploadRef}\n                  onChange={(e) => {\n                    setData(e.target.files[0])\n                    readExcel(e.target.files[0])\n                  }}\n                  accept=\".xlsx\"\n                  style={{\n                    visibility:\"hidden\"\n                  }}\n                />\n                <div className=\"browse-files\">\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={() => fileUploadRef.current.click()}\n                  >\n                    Browse Files\n                  </button>\n                </div>\n              </div>\n        </div>\n        </div>\n      ) : (\n        <div className=\"table_container\">\n          <Table1\n            heading={heading}\n            selectedItems={selectedItems}\n            setSelectedItems={setSelectedItems}\n            handleShift={handleShift}\n          />\n          <br />\n          <br />\n          <br />\n          <Table2 heading={heading} items={items} handleShift={handleShift} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}